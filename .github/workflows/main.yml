# This is a basic workflow to help you get started with Actions

name: MLGO CI

permissions:
  contents: read

on:
  push:
    branches:
      - 'main'
  repository_dispatch:
  pull_request:

jobs:
  LicenseCheck:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - run: ./check-license.sh
  PreCommit:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - run: pipx run pre-commit run --all-files
  Envvars:
    runs-on: ubuntu-22.04
    outputs:
      version_matrix: ${{ steps.set-output.outputs.version_matrix }}
      do_cache: ${{ steps.set-output.outputs.do_cache }}
    steps:
      - id: set-output
        run: |
          if [ -z $ACT ]
          then
            _ver="['3.10','3.11']"
            _cache="1"
          else
            # 3.10 instead of '3.10' to make github act work.
            _ver="[3.10,3.11]"
            _cache="0"
          fi
          echo "version_matrix=$_ver" >> $GITHUB_OUTPUT
          echo "do_cache=$_cache" >> $GITHUB_OUTPUT
  Checks:
    runs-on: ubuntu-22.04
    needs: [Envvars]
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.Envvars.outputs.version_matrix) }}
        task: [Typecheck, Lint, Test]
        include:
          - task: Typecheck
            cmd: pytype -j auto .
          - task: Lint
            cmd: pylint --rcfile .pylintrc --recursive yes .
          - task: Test
            cmd: pytest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python With Cached pip Packages
        if: needs.Envvars.outputs.do_cache == '1'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pipenv'
          cache-dependency-path: Pipfile.lock
      - name: Install Python, no cache
        if: needs.Envvars.outputs.do_cache == '0'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Pipenv
        run: pip3 install pipenv
      - name: Install Python Dependencies
        run: pipenv sync --categories="packages dev-packages ci" --verbose
      - name: ${{ matrix.task }}
        run: pipenv run ${{ matrix.cmd }}
